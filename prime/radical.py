import os, csv, pprint, jieba
from baseconvert import BaseConverter
from googletrans import Translator

xx = jieba.cut('早上好')
print(xx)

translator = Translator()
base = BaseConverter(input_base=10, output_base=14)
base_dict = {}
rad_freq = {}
primes = {
    1: 2,
    2: 3,
    3: 5,
    4: 7,
    5: 11,
    6: 13,
    7: 17,
    8: 19,
    9: 23,
    10: 29,
    11: 31,
    12: 37,
    13: 41,
    14: 43,
    15: 47,
    16: 53,
    17: 59,
    18: 61,
    19: 67,
    20: 71,
    21: 73,
    22: 79,
    23: 83,
    24: 89,
    25: 97,
    26: 101,
    27: 103,
    28: 107,
    29: 109,
    30: 113,
    31: 127,
    32: 131,
    33: 137,
    34: 139,
    35: 149,
    36: 151,
    37: 157,
    38: 163,
    39: 167,
    40: 173,
    41: 179,
    42: 181,
    43: 191,
    44: 193,
    45: 197,
    46: 199,
    47: 211,
    48: 223,
    49: 227,
    50: 229,
    51: 233,
    52: 239,
    53: 241,
    54: 251,
    55: 257,
    56: 263,
    57: 269,
    58: 271,
    59: 277,
    60: 281,
    61: 283,
    62: 293,
    63: 307,
    64: 311,
    65: 313,
    66: 317,
    67: 331,
    68: 337,
    69: 347,
    70: 349,
    71: 353,
    72: 359,
    73: 367,
    74: 373,
    75: 379,
    76: 383,
    77: 389,
    78: 397,
    79: 401,
    80: 409,
    81: 419,
    82: 421,
    83: 431,
    84: 433,
    85: 439,
    86: 443,
    87: 449,
    88: 457,
    89: 461,
    90: 463,
    91: 467,
    92: 479,
    93: 487,
    94: 491,
    95: 499,
    96: 503,
    97: 509,
    98: 521,
    99: 523,
    100: 541,
    101: 547,
    102: 557,
    103: 563,
    104: 569,
    105: 571,
    106: 577,
    107: 587,
    108: 593,
    109: 599,
    110: 601,
    111: 607,
    112: 613,
    113: 617,
    114: 619,
    115: 631,
    116: 641,
    117: 643,
    118: 647,
    119: 653,
    120: 659,
    121: 661,
    122: 673,
    123: 677,
    124: 683,
    125: 691,
    126: 701,
    127: 709,
    128: 719,
    129: 727,
    130: 733,
    131: 739,
    132: 743,
    133: 751,
    134: 757,
    135: 761,
    136: 769,
    137: 773,
    138: 787,
    139: 797,
    140: 809,
    141: 811,
    142: 821,
    143: 823,
    144: 827,
    145: 829,
    146: 839,
    147: 853,
    148: 857,
    149: 859,
    150: 863,
    151: 877,
    152: 881,
    153: 883,
    154: 887,
    155: 907,
    156: 911,
    157: 919,
    158: 929,
    159: 937,
    160: 941,
    161: 947,
    162: 953,
    163: 967,
    164: 971,
    165: 977,
    166: 983,
    167: 991,
    168: 997,
    169: 1009,
    170: 1013,
    171: 1019,
    172: 1021,
    173: 1031,
    174: 1033,
    175: 1039,
    176: 1049,
    177: 1051,
    178: 1061,
    179: 1063,
    180: 1069,
    181: 1087,
    182: 1091,
    183: 1093,
    184: 1097,
    185: 1103,
    186: 1109,
    187: 1117,
    188: 1123,
    189: 1129,
    190: 1151,
    191: 1153,
    192: 1163,
    193: 1171,
    194: 1181,
    195: 1187,
    196: 1193,
    197: 1201,
    198: 1213,
    199: 1217,
    200: 1223,
    201: 1229,
    202: 1231,
    203: 1237,
    204: 1249,
    205: 1259,
    206: 1277,
    207: 1279,
    208: 1283,
    209: 1289,
    210: 1291,
    211: 1297,
    212: 1301,
    213: 1303,
    214: 1307,
    215: 1319,
    216: 1321,
    217: 1327,
    218: 1361,
    219: 1367,
    220: 1373,
    221: 1381,
    222: 1399,
    223: 1409,
    224: 1423,
    225: 1427,
    226: 1429,
    227: 1433,
    228: 1439,
    229: 1447,
    230: 1451,
    231: 1453,
    232: 1459,
    233: 1471,
    234: 1481,
    235: 1483,
    236: 1487,
    237: 1489,
    238: 1493,
    239: 1499,
    240: 1511,
    241: 1523,
    242: 1531,
    243: 1543,
    244: 1549,
    245: 1553,
    246: 1559,
    247: 1567,
    248: 1571,
    249: 1579,
    250: 1583,
    251: 1597,
    252: 1601,
    253: 1607,
    254: 1609,
    255: 1613,
    256: 1619,
    257: 1621,
    258: 1627,
    259: 1637,
    260: 1657,
    261: 1663,
    262: 1667,
    263: 1669,
    264: 1693,
    265: 1697,
    266: 1699,
    267: 1709,
    268: 1721,
    269: 1723,
    270: 1733,
    271: 1741,
    272: 1747,
    273: 1753,
    274: 1759,
    275: 1777,
    276: 1783,
    277: 1787,
    278: 1789,
    279: 1801,
    280: 1811,
    281: 1823,
    282: 1831,
    283: 1847,
    284: 1861,
    285: 1867,
    286: 1871,
    287: 1873,
    288: 1877,
    289: 1879,
    290: 1889,
    291: 1901,
    292: 1907,
    293: 1913,
    294: 1931,
    295: 1933,
    296: 1949,
    297: 1951,
    298: 1973,
    299: 1979,
    300: 1987,
    301: 1993,
    302: 1997,
    303: 1999,
    304: 2003,
    305: 2011,
    306: 2017,
    307: 2027,
    308: 2029,
    309: 2039,
    310: 2053,
    311: 2063,
    312: 2069,
    313: 2081,
    314: 2083,
    315: 2087,
    316: 2089,
    317: 2099,
    318: 2111,
    319: 2113,
    320: 2129,
    321: 2131,
    322: 2137,
    323: 2141,
    324: 2143,
    325: 2153,
    326: 2161,
    327: 2179,
    328: 2203,
    329: 2207,
    330: 2213,
    331: 2221,
    332: 2237,
    333: 2239,
    334: 2243,
    335: 2251,
    336: 2267,
    337: 2269,
    338: 2273,
    339: 2281,
    340: 2287,
    341: 2293,
    342: 2297,
    343: 2309,
    344: 2311,
    345: 2333,
    346: 2339,
    347: 2341,
    348: 2347,
    349: 2351,
    350: 2357,
    351: 2371,
    352: 2377,
    353: 2381,
    354: 2383,
    355: 2389,
    356: 2393,
    357: 2399,
    358: 2411,
    359: 2417,
    360: 2423,
    361: 2437,
    362: 2441,
    363: 2447,
    364: 2459,
    365: 2467,
    366: 2473,
    367: 2477,
    368: 2503,
    369: 2521,
    370: 2531,
    371: 2539,
    372: 2543,
    373: 2549,
    374: 2551,
    375: 2557,
    376: 2579,
    377: 2591,
    378: 2593,
    379: 2609,
    380: 2617,
    381: 2621,
    382: 2633,
    383: 2647,
    384: 2657,
    385: 2659,
    386: 2663,
    387: 2671,
    388: 2677
}

cons = ['g','d','r','m','n','s','ng','j','ch','kk','t','p','b','h']
vowl = ['a','yo','eo','o','wa','u','yu','i','oe','yae','e','wae','we','wi']

with open('hanz.csv', newline='', encoding='utf-8') as f:
    reader = csv.reader(f)
    data = {t[0] : t[1:] for t in list(reader)}

def build(val):
    ret = ''
    whi = 1 if len(val) % 2 == 0 else -1    # Start with vowel if count is odd
    for v in val:
        if whi == 1:
            ret += cons[int(v)]
        else:
            ret += vowl[int(v)]
        whi = whi * -1
    return ret

def get(data, t, back=''):
    if len(t) > 1: t = t[0]
    if t in data:
        base = data[t][2]
        if base != t:
            back = data[t][5] + back
            back = get(data,base,back) + back
        else:
            back = base
            if back not in rad_freq:
                rad_freq[back] = 1
            else:
                rad_freq[back] += 1
    else:
        back = t
        if back not in rad_freq:
            rad_freq[back] = 1
        else:
            rad_freq[back] += 1

    return back

for char in data.keys(): base_dict[char] = get(data,char)               # Assemble decompositions
rad_freq = sorted(rad_freq.items(), key=lambda x: x[1])                 # Sort list of radicals
rad_freq.reverse()                                                      # Flip the list
rad_freq = {t[0] : primes[rad_freq.index(t) + 1] for t in rad_freq}     # Get prime numberization

print('～中国語分解のプログラム～\n')

while True:
    seg_list = jieba.cut(input('Input text:\t'))

    output = ''
    for seg in seg_list:
        out = 0
        alr = []
        if len(seg) > 0:
            for s in seg:
                if s in base_dict:
                    for bit in base_dict[s]:
                        try:
                            if rad_freq[bit] not in alr:
                                out += rad_freq[bit]
                                alr.append(rad_freq[bit])
                        except:
                            pass
                else:
                    out = 0
                    output += s
                    alr = []
        else:
            if s in base_dict:
                for bit in base_dict[seg]:
                    if rad_freq[bit] not in alr:
                        out += rad_freq[bit]
                        alr.append(rad_freq[bit])
            else:
                out = 0
                output += s
                alr = []
        if out > 0:
            output += build(base(out)) + ' '
            alr = []
        else:
            output += ' '

    print('Chitotzish:\t' + output + '\n\n')